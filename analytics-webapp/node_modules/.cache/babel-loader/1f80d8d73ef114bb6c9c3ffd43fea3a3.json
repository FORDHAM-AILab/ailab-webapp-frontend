{"ast":null,"code":"import _defineProperty from \"/Users/xuanmingcui/Documents/projects/ailab-webapp-frontend/analytics-webapp/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/xuanmingcui/Documents/projects/ailab-webapp-frontend/analytics-webapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/xuanmingcui/Documents/projects/ailab-webapp-frontend/analytics-webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/xuanmingcui/Documents/projects/ailab-webapp-frontend/analytics-webapp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/xuanmingcui/Documents/projects/ailab-webapp-frontend/analytics-webapp/src/views/DataIntelligence/CDS.js\",\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"/Users/xuanmingcui/Documents/projects/ailab-webapp-frontend/analytics-webapp/node_modules/@babel/runtime/regenerator/index.js\";\n\n/*!\n\n=========================================================\n* Paper Dashboard React - v1.3.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/paper-dashboard-react\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\n* Licensed under MIT (https://github.com/creativetimofficial/paper-dashboard-react/blob/main/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React, { useEffect, useState } from \"react\"; // reactstrap components\n\nimport { Card, CardHeader, CardBody, Row, Col, Label, Input, Form, FormGroup, Button } from \"reactstrap\";\nimport DynamicTable from \"components/Tables/table\";\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/animated';\nimport AsyncSelect from 'react-select/async';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CDSView() {\n  _s();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      ticker = _useState2[0],\n      SetTicker = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      expiration_list = _useState4[0],\n      SetExpirationList = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      expiration_date = _useState6[0],\n      SetExpirationDate = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      options_type = _useState8[0],\n      SetOptionsType = _useState8[1];\n\n  var _useState9 = useState({\n    \"REGION\": [],\n    \"INDUSTRY\": [],\n    \"OBLIGATION_ASSETRANK\": [],\n    \"CREDIT_EVENTS\": [],\n    \"limit\": 100\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      cds_specs = _useState10[0],\n      SetCDSDataSpecs = _useState10[1];\n\n  var _useState11 = useState({\n    \"REGION\": [],\n    \"INDUSTRY\": [],\n    \"OBLIGATION_ASSETRANK\": [],\n    \"CREDIT_EVENTS\": []\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      cds_specs_list = _useState12[0],\n      SetCDSSpecsList = _useState12[1];\n\n  var _useState13 = useState(),\n      _useState14 = _slicedToArray(_useState13, 2),\n      cds_data = _useState14[0],\n      SetCDSData = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      data_requested = _useState16[0],\n      SetDataRequested = _useState16[1];\n\n  var _useState17 = useState(),\n      _useState18 = _slicedToArray(_useState17, 2),\n      options_price = _useState18[0],\n      SetOptionsPrice = _useState18[1];\n\n  function fetch_cds_param_values(_x) {\n    return _fetch_cds_param_values.apply(this, arguments);\n  }\n\n  function _fetch_cds_param_values() {\n    _fetch_cds_param_values = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(param) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              fetch(\"http://localhost:8888/data/data_warehouse/cds_get_unique_val/\".concat(param)).then(function (response) {\n                return response.json();\n              }).then(function (responseData) {\n                var result = responseData[\"result\"];\n                var filterOptions = result.map(function (option) {\n                  return {\n                    \"value\": option,\n                    \"label\": option\n                  };\n                });\n                SetCDSSpecsList(function (prevState) {\n                  return _objectSpread(_objectSpread({}, prevState), {}, _defineProperty({}, param, filterOptions));\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _fetch_cds_param_values.apply(this, arguments);\n  }\n\n  function get_cds_data() {\n    return _get_cds_data.apply(this, arguments);\n  }\n\n  function _get_cds_data() {\n    _get_cds_data = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(\"Fetching data start\");\n              result = fetch('http://localhost:8888/data/data_warehouse/get_cds_data', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(cds_specs)\n              }).then(function (response) {\n                return response.json();\n              }).then(function (responseJSON) {\n                SetCDSData(JSON.parse(responseJSON[\"result\"]));\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _get_cds_data.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    Object.keys(cds_specs_list).map(function (key, index) {\n      return fetch_cds_param_values(key);\n    });\n  }, []);\n\n  function CDSFilter(param) {\n    function handleMultiSelect(e) {\n      var spec_list = e.map(function (value) {\n        return value[\"value\"];\n      });\n      SetCDSDataSpecs(function (prevState) {\n        return _objectSpread(_objectSpread({}, prevState), {}, _defineProperty({}, param, spec_list));\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: param\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        isMulti: true,\n        name: \"param\",\n        options: cds_specs_list[param],\n        className: \"cds-multi-select\",\n        onChange: handleMultiSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }, this);\n  }\n\n  function CDSDataForm() {\n    console.log(cds_specs);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: function onSubmit(e) {\n          e.preventDefault();\n          SetCDSData(null);\n          get_cds_data();\n          SetDataRequested(true);\n        },\n        children: [CDSFilter(\"REGION\"), CDSFilter(\"INDUSTRY\"), CDSFilter(\"OBLIGATION_ASSETRANK\"), CDSFilter(\"CREDIT_EVENTS\"), /*#__PURE__*/_jsxDEV(Label, {\n          children: \"Row limit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"number\",\n          value: cds_specs[\"limit\"],\n          onChange: function onChange(e) {\n            SetCDSDataSpecs(function (prevState) {\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                limit: e.target.value\n              });\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  }\n\n  function CDSsDataTable() {\n    var style = {\n      maxHeight: \"400px\",\n      //maxWidth: `6in`,\n      overflowY: 'auto',\n      overflowX: 'auto'\n    };\n\n    if (cds_data != null) {\n      console.log(\"here\");\n\n      if (cds_data.length === 0) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No data found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: style,\n          children: [/*#__PURE__*/_jsxDEV(DynamicTable, {\n            data: cds_data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CSVLink, {\n            data: cds_data,\n            children: \"Download\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), \";\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this);\n      }\n    } else {\n      if (data_requested) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: \"12\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              children: \"Get CDS Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n              children: [CDSDataForm(), CDSsDataTable()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(CDSView, \"1/UsKYziaLF15pdA80zAuKbXuXU=\");\n\n_c = CDSView;\nexport default CDSView;\n\nvar _c;\n\n$RefreshReg$(_c, \"CDSView\");","map":{"version":3,"sources":["/Users/xuanmingcui/Documents/projects/ailab-webapp-frontend/analytics-webapp/src/views/DataIntelligence/CDS.js"],"names":["React","useEffect","useState","Card","CardHeader","CardBody","Row","Col","Label","Input","Form","FormGroup","Button","DynamicTable","Select","makeAnimated","AsyncSelect","CDSView","ticker","SetTicker","expiration_list","SetExpirationList","expiration_date","SetExpirationDate","options_type","SetOptionsType","cds_specs","SetCDSDataSpecs","cds_specs_list","SetCDSSpecsList","cds_data","SetCDSData","data_requested","SetDataRequested","options_price","SetOptionsPrice","fetch_cds_param_values","param","fetch","then","response","json","responseData","result","filterOptions","map","option","prevState","get_cds_data","console","log","method","headers","body","JSON","stringify","responseJSON","parse","Object","keys","key","index","CDSFilter","handleMultiSelect","e","spec_list","value","CDSDataForm","preventDefault","limit","target","CDSsDataTable","style","maxHeight","overflowY","overflowX","length"],"mappings":"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","sourcesContent":["/*!\n\n=========================================================\n* Paper Dashboard React - v1.3.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/paper-dashboard-react\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\n* Licensed under MIT (https://github.com/creativetimofficial/paper-dashboard-react/blob/main/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React, { useEffect, useState } from \"react\";\n\n// reactstrap components\nimport { Card, CardHeader, CardBody, Row, Col, Label, Input, Form, FormGroup, Button} from \"reactstrap\";\nimport DynamicTable from \"components/Tables/table\";\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/animated';\nimport AsyncSelect from 'react-select/async';\n\n\nfunction CDSView() {\n  const [ticker, SetTicker] = useState();\n  const [expiration_list, SetExpirationList] = useState([])\n  const [expiration_date, SetExpirationDate] = useState()\n  const [options_type, SetOptionsType] = useState(\"\")\n  const [cds_specs, SetCDSDataSpecs] = useState({\"REGION\": [], \"INDUSTRY\": [], \"OBLIGATION_ASSETRANK\":[], \"CREDIT_EVENTS\": [], \"limit\": 100})\n  const [cds_specs_list, SetCDSSpecsList] = useState({\"REGION\": [], \"INDUSTRY\": [], \"OBLIGATION_ASSETRANK\":[], \"CREDIT_EVENTS\": []})\n  const [cds_data, SetCDSData] = useState()\n  const [data_requested, SetDataRequested] = useState(false)\n  const [options_price, SetOptionsPrice] = useState()\n\n\n  async function fetch_cds_param_values(param){\n    fetch(`http://localhost:8888/data/data_warehouse/cds_get_unique_val/${param}`)\n    .then((response) => response.json())\n    .then((responseData) => {\n      let result = responseData[\"result\"];\n      let filterOptions = result.map((option)=> ({\"value\":option, \"label\":option}))\n      SetCDSSpecsList((prevState) => ({\n        ...prevState,\n        [param]: filterOptions\n      }))\n    })\n  }\n\n  async function get_cds_data(){\n    console.log(\"Fetching data start\")\n    const result = fetch('http://localhost:8888/data/data_warehouse/get_cds_data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(cds_specs)\n      }).then((response) => response.json()).then(\n        (responseJSON) => {SetCDSData(JSON.parse(responseJSON[\"result\"]));}\n      )\n  }\n\n\n  useEffect(()=>{\n    Object.keys(cds_specs_list).map((key,index)=>(\n    \n        fetch_cds_param_values(key)\n    ))\n  }, [])\n\n  function CDSFilter(param){\n    function handleMultiSelect(e) {\n        const spec_list = e.map((value)=> value[\"value\"])\n        SetCDSDataSpecs(prevState => ({\n            ...prevState,\n            [param]: spec_list\n          }))\n    }\n      return (\n          <div>\n              <label>{param}</label>\n              <Select\n                isMulti\n                name=\"param\"\n                options={cds_specs_list[param]}\n                className=\"cds-multi-select\"\n                onChange={handleMultiSelect}\n              />\n          </div>\n      )\n  }\n\n  function CDSDataForm () {\n    console.log(cds_specs)\n    return (\n      <div>\n      <Form  onSubmit={(e) => {e.preventDefault(); SetCDSData(null); get_cds_data(); SetDataRequested(true)}}>\n        {CDSFilter(\"REGION\")}\n        {CDSFilter(\"INDUSTRY\")}\n        {CDSFilter(\"OBLIGATION_ASSETRANK\")}\n        {CDSFilter(\"CREDIT_EVENTS\")}\n        <Label>Row limit</Label>\n        <Input type=\"number\" value={cds_specs[\"limit\"]} onChange={(e)=> {SetCDSDataSpecs(prevState=> ({\n          ...prevState,\n          limit:e.target.value\n        }))}}/>\n        <Button>Submit</Button>\n      </Form>\n      </div>\n    )\n  }\n\n  function CDSsDataTable () {\n    const style = {\n      maxHeight: `400px`,\n      //maxWidth: `6in`,\n      overflowY: 'auto',\n      overflowX: 'auto'\n    };\n    if (cds_data != null){\n      console.log(\"here\")\n      if (cds_data.length === 0){\n        return (\n          <div>\n            <p>No data found</p>\n          </div>\n        )\n      }\n      else {\n        return (\n          <div style={style}>\n            <DynamicTable data={cds_data}/>\n            <CSVLink data={cds_data}>Download</CSVLink>;\n          </div>\n        )\n      }\n\n    }\n    else {\n      if (data_requested){\n        return (\n          <div>\n            <p>Loading Data</p>\n          </div>\n        )\n      }\n      else{\n        return (\n          <></>\n        )\n      }\n\n    }\n  }\n\n\n\n\n\n\n  return (\n    <>\n    <div className=\"content\">\n      <Row>\n        <Col md=\"12\">\n          <Card>\n            <CardHeader>Get CDS Data</CardHeader>\n            <CardBody>\n              {CDSDataForm()}\n              {CDSsDataTable()}\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      \n    </div>\n    </>\n  );\n}\n\nexport default CDSView;\n"]},"metadata":{},"sourceType":"module"}