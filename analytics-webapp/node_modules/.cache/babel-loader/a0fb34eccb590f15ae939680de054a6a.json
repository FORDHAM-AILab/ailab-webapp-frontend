{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (distances, perplexity) {\n  var nSteps = 100;\n  var nSamples = distances.shape[0];\n  var P_cond = (0, _ndarray2.default)(new Float64Array(nSamples * nSamples), [nSamples, nSamples]);\n  var P = (0, _ndarray2.default)(new Float64Array(nSamples * nSamples), [nSamples, nSamples]);\n  var beta = undefined,\n      betaMin = undefined,\n      betaMax = Infinity;\n  var betaSum = 0.0;\n  var desired_entropy = Math.log(perplexity);\n  var entropyDiff = undefined,\n      entropy = undefined;\n  var sum_Pi = undefined,\n      sum_disti_Pi = undefined;\n\n  for (var i = 0; i < nSamples; i++) {\n    beta = 1.0;\n    betaMin = -Infinity;\n    betaMax = Infinity;\n\n    for (var step = 0; step < nSteps; step++) {\n      for (var j = 0; j < nSamples; j++) {\n        P_cond.set(i, j, Math.exp(-distances.get(i, j) * beta));\n      }\n\n      P_cond.set(i, i, 0.0);\n      sum_Pi = 0.0;\n\n      for (var j = 0; j < nSamples; j++) {\n        sum_Pi += P_cond.get(i, j);\n      }\n\n      if (sum_Pi == 0.0) sum_Pi = EPSILON_DBL;\n      sum_disti_Pi = 0.0;\n\n      for (var j = 0; j < nSamples; j++) {\n        P_cond.set(i, j, P_cond.get(i, j) / sum_Pi);\n        sum_disti_Pi += distances.get(i, j) * P_cond.get(i, j);\n      }\n\n      entropy = Math.log(sum_Pi) + beta * sum_disti_Pi;\n      entropyDiff = entropy - desired_entropy;\n      if (Math.abs(entropyDiff) <= PERPLEXITY_TOLERANCE) break;\n\n      if (entropyDiff > 0.0) {\n        betaMin = beta;\n\n        if (betaMax == Infinity) {\n          beta = beta * 2.0;\n        } else {\n          beta = (beta + betaMax) / 2.0;\n        }\n      } else {\n        betaMax = beta;\n\n        if (betaMin == -Infinity) {\n          beta = beta / 2.0;\n        } else {\n          beta = (beta + betaMin) / 2.0;\n        }\n      }\n    }\n\n    betaSum += beta;\n  }\n\n  _ndarrayOps2.default.add(P, P_cond, P_cond.transpose(1, 0));\n\n  var sum_P = Math.max(_ndarrayOps2.default.sum(P), MACHINE_EPSILON);\n\n  _ndarrayOps2.default.divseq(P, sum_P);\n\n  _ndarrayOps2.default.maxseq(P, MACHINE_EPSILON);\n\n  return P;\n};\n\nvar _ndarray = require('ndarray');\n\nvar _ndarray2 = _interopRequireDefault(_ndarray);\n\nvar _ndarrayOps = require('ndarray-ops');\n\nvar _ndarrayOps2 = _interopRequireDefault(_ndarrayOps);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar EPSILON_DBL = 1e-7;\nvar MACHINE_EPSILON = Number.EPSILON || 2.220446049250313e-16;\nvar PERPLEXITY_TOLERANCE = 1e-5;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/xuanmingcui/Documents/projects/ailab-webapp-frontend/analytics-webapp/node_modules/tsne-js/dist/joint-probabilities.js"],"names":["Object","defineProperty","exports","value","default","distances","perplexity","nSteps","nSamples","shape","P_cond","_ndarray2","Float64Array","P","beta","undefined","betaMin","betaMax","Infinity","betaSum","desired_entropy","Math","log","entropyDiff","entropy","sum_Pi","sum_disti_Pi","i","step","j","set","exp","get","EPSILON_DBL","abs","PERPLEXITY_TOLERANCE","_ndarrayOps2","add","transpose","sum_P","max","sum","MACHINE_EPSILON","divseq","maxseq","_ndarray","require","_interopRequireDefault","_ndarrayOps","obj","__esModule","Number","EPSILON","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (distances, perplexity) {\n  var nSteps = 100;\n  var nSamples = distances.shape[0];\n  var P_cond = (0, _ndarray2.default)(new Float64Array(nSamples * nSamples), [nSamples, nSamples]);\n  var P = (0, _ndarray2.default)(new Float64Array(nSamples * nSamples), [nSamples, nSamples]);\n\n  var beta = undefined,\n      betaMin = undefined,\n      betaMax = Infinity;\n  var betaSum = 0.0;\n\n  var desired_entropy = Math.log(perplexity);\n  var entropyDiff = undefined,\n      entropy = undefined;\n  var sum_Pi = undefined,\n      sum_disti_Pi = undefined;\n\n  for (var i = 0; i < nSamples; i++) {\n    beta = 1.0;\n    betaMin = -Infinity;\n    betaMax = Infinity;\n\n    for (var step = 0; step < nSteps; step++) {\n\n      for (var j = 0; j < nSamples; j++) {\n        P_cond.set(i, j, Math.exp(-distances.get(i, j) * beta));\n      }\n\n      P_cond.set(i, i, 0.0);\n      sum_Pi = 0.0;\n      for (var j = 0; j < nSamples; j++) {\n        sum_Pi += P_cond.get(i, j);\n      }\n      if (sum_Pi == 0.0) sum_Pi = EPSILON_DBL;\n\n      sum_disti_Pi = 0.0;\n      for (var j = 0; j < nSamples; j++) {\n        P_cond.set(i, j, P_cond.get(i, j) / sum_Pi);\n        sum_disti_Pi += distances.get(i, j) * P_cond.get(i, j);\n      }\n\n      entropy = Math.log(sum_Pi) + beta * sum_disti_Pi;\n      entropyDiff = entropy - desired_entropy;\n      if (Math.abs(entropyDiff) <= PERPLEXITY_TOLERANCE) break;\n\n      if (entropyDiff > 0.0) {\n        betaMin = beta;\n        if (betaMax == Infinity) {\n          beta = beta * 2.0;\n        } else {\n          beta = (beta + betaMax) / 2.0;\n        }\n      } else {\n        betaMax = beta;\n        if (betaMin == -Infinity) {\n          beta = beta / 2.0;\n        } else {\n          beta = (beta + betaMin) / 2.0;\n        }\n      }\n    }\n\n    betaSum += beta;\n  }\n\n  _ndarrayOps2.default.add(P, P_cond, P_cond.transpose(1, 0));\n  var sum_P = Math.max(_ndarrayOps2.default.sum(P), MACHINE_EPSILON);\n  _ndarrayOps2.default.divseq(P, sum_P);\n  _ndarrayOps2.default.maxseq(P, MACHINE_EPSILON);\n  return P;\n};\n\nvar _ndarray = require('ndarray');\n\nvar _ndarray2 = _interopRequireDefault(_ndarray);\n\nvar _ndarrayOps = require('ndarray-ops');\n\nvar _ndarrayOps2 = _interopRequireDefault(_ndarrayOps);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar EPSILON_DBL = 1e-7;\nvar MACHINE_EPSILON = Number.EPSILON || 2.220446049250313e-16;\nvar PERPLEXITY_TOLERANCE = 1e-5;\n\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}