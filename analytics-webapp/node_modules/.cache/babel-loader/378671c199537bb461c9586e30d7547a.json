{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (embedding, P, alpha) {\n  var nSamples = embedding.shape[0];\n  var dim = embedding.shape[1]; // Q: Student's t-distribution\n\n  var Q = (0, _ndarray2.default)(new Float64Array(nSamples * nSamples), [nSamples, nSamples]);\n  var n = (0, _pairwiseDistances2.default)(embedding, 'euclidean');\n  square(n);\n  var beta = (alpha + 1.0) / -2.0;\n\n  _ndarrayOps2.default.powseq(_ndarrayOps2.default.divseq(_ndarrayOps2.default.addseq(n, 1), alpha), beta);\n\n  for (var i = 0; i < nSamples; i++) {\n    n.set(i, i, 0);\n  }\n\n  var sum_n = Math.max(_ndarrayOps2.default.sum(n), MACHINE_EPSILON);\n\n  _ndarrayOps2.default.divs(Q, n, sum_n);\n\n  _ndarrayOps2.default.maxseq(Q, MACHINE_EPSILON); // Kullback-Leibler divergence of P and Q\n\n\n  var temp = (0, _ndarray2.default)(new Float64Array(nSamples * nSamples), [nSamples, nSamples]);\n  var temp2 = (0, _ndarray2.default)(new Float64Array(nSamples * nSamples), [nSamples, nSamples]);\n\n  _ndarrayOps2.default.div(temp, P, Q);\n\n  _ndarrayOps2.default.logeq(temp);\n\n  _ndarrayOps2.default.assign(temp2, P);\n\n  var kl_divergence = _ndarrayOps2.default.sum(_ndarrayOps2.default.muleq(temp, temp2)); // calculate gradient\n\n\n  var grad = (0, _ndarray2.default)(new Float64Array(embedding.size), embedding.shape);\n  var PQd = (0, _ndarray2.default)(new Float64Array(nSamples * nSamples), [nSamples, nSamples]);\n\n  _ndarrayOps2.default.sub(PQd, P, Q);\n\n  _ndarrayOps2.default.muleq(PQd, n);\n\n  for (var i = 0; i < nSamples; i++) {\n    for (var d = 0; d < dim; d++) {\n      var _temp = (0, _ndarray2.default)(new Float64Array(embedding.shape[0]), [embedding.shape[0]]);\n\n      _ndarrayOps2.default.assign(_temp, embedding.pick(null, d));\n\n      _ndarrayOps2.default.addseq(_ndarrayOps2.default.negeq(_temp), embedding.get(i, d));\n\n      _ndarrayOps2.default.muleq(_temp, PQd.pick(i, null));\n\n      grad.set(i, d, _ndarrayOps2.default.sum(_temp));\n    }\n  }\n\n  var c = 2.0 * (alpha + 1.0) / alpha;\n\n  _ndarrayOps2.default.mulseq(grad, c);\n\n  return [kl_divergence, grad];\n};\n\nvar _ndarray = require('ndarray');\n\nvar _ndarray2 = _interopRequireDefault(_ndarray);\n\nvar _ndarrayOps = require('ndarray-ops');\n\nvar _ndarrayOps2 = _interopRequireDefault(_ndarrayOps);\n\nvar _cwise = require('cwise');\n\nvar _cwise2 = _interopRequireDefault(_cwise);\n\nvar _pairwiseDistances = require('./pairwise-distances');\n\nvar _pairwiseDistances2 = _interopRequireDefault(_pairwiseDistances);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MACHINE_EPSILON = Number.EPSILON || 2.220446049250313e-16;\nvar square = (0, _cwise2.default)({\n  args: ['array'],\n  body: function body(a) {\n    a = a * a;\n  }\n});\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/xuanmingcui/Documents/projects/ailab-webapp-frontend/analytics-webapp/node_modules/tsne-js/dist/kl-divergence.js"],"names":["Object","defineProperty","exports","value","default","embedding","P","alpha","nSamples","shape","dim","Q","_ndarray2","Float64Array","n","_pairwiseDistances2","square","beta","_ndarrayOps2","powseq","divseq","addseq","i","set","sum_n","Math","max","sum","MACHINE_EPSILON","divs","maxseq","temp","temp2","div","logeq","assign","kl_divergence","muleq","grad","size","PQd","sub","d","_temp","pick","negeq","get","c","mulseq","_ndarray","require","_interopRequireDefault","_ndarrayOps","_cwise","_cwise2","_pairwiseDistances","obj","__esModule","Number","EPSILON","args","body","a","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (embedding, P, alpha) {\n\n  var nSamples = embedding.shape[0];\n  var dim = embedding.shape[1];\n\n  // Q: Student's t-distribution\n  var Q = (0, _ndarray2.default)(new Float64Array(nSamples * nSamples), [nSamples, nSamples]);\n  var n = (0, _pairwiseDistances2.default)(embedding, 'euclidean');\n  square(n);\n  var beta = (alpha + 1.0) / -2.0;\n  _ndarrayOps2.default.powseq(_ndarrayOps2.default.divseq(_ndarrayOps2.default.addseq(n, 1), alpha), beta);\n  for (var i = 0; i < nSamples; i++) {\n    n.set(i, i, 0);\n  }\n  var sum_n = Math.max(_ndarrayOps2.default.sum(n), MACHINE_EPSILON);\n  _ndarrayOps2.default.divs(Q, n, sum_n);\n  _ndarrayOps2.default.maxseq(Q, MACHINE_EPSILON);\n\n  // Kullback-Leibler divergence of P and Q\n  var temp = (0, _ndarray2.default)(new Float64Array(nSamples * nSamples), [nSamples, nSamples]);\n  var temp2 = (0, _ndarray2.default)(new Float64Array(nSamples * nSamples), [nSamples, nSamples]);\n  _ndarrayOps2.default.div(temp, P, Q);\n  _ndarrayOps2.default.logeq(temp);\n  _ndarrayOps2.default.assign(temp2, P);\n  var kl_divergence = _ndarrayOps2.default.sum(_ndarrayOps2.default.muleq(temp, temp2));\n\n  // calculate gradient\n  var grad = (0, _ndarray2.default)(new Float64Array(embedding.size), embedding.shape);\n  var PQd = (0, _ndarray2.default)(new Float64Array(nSamples * nSamples), [nSamples, nSamples]);\n  _ndarrayOps2.default.sub(PQd, P, Q);\n  _ndarrayOps2.default.muleq(PQd, n);\n  for (var i = 0; i < nSamples; i++) {\n    for (var d = 0; d < dim; d++) {\n      var _temp = (0, _ndarray2.default)(new Float64Array(embedding.shape[0]), [embedding.shape[0]]);\n      _ndarrayOps2.default.assign(_temp, embedding.pick(null, d));\n      _ndarrayOps2.default.addseq(_ndarrayOps2.default.negeq(_temp), embedding.get(i, d));\n      _ndarrayOps2.default.muleq(_temp, PQd.pick(i, null));\n      grad.set(i, d, _ndarrayOps2.default.sum(_temp));\n    }\n  }\n  var c = 2.0 * (alpha + 1.0) / alpha;\n  _ndarrayOps2.default.mulseq(grad, c);\n\n  return [kl_divergence, grad];\n};\n\nvar _ndarray = require('ndarray');\n\nvar _ndarray2 = _interopRequireDefault(_ndarray);\n\nvar _ndarrayOps = require('ndarray-ops');\n\nvar _ndarrayOps2 = _interopRequireDefault(_ndarrayOps);\n\nvar _cwise = require('cwise');\n\nvar _cwise2 = _interopRequireDefault(_cwise);\n\nvar _pairwiseDistances = require('./pairwise-distances');\n\nvar _pairwiseDistances2 = _interopRequireDefault(_pairwiseDistances);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MACHINE_EPSILON = Number.EPSILON || 2.220446049250313e-16;\n\nvar square = (0, _cwise2.default)({\n  args: ['array'],\n  body: function body(a) {\n    a = a * a;\n  }\n});\n\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}